
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Random;

/**
 * This code has been adapted from
 * http://download.oracle.com/javase/tutorial/networking/sockets/clientServer.html
 */
public class OrderServer {

    public static void main(String[] args) throws Exception {//main class which handles all server side code
        ServerSocket serverSocket = null;// server socket
        String StoredCookie = "";//stores the cookie generated by random function
        Order MainOrderObj = null;
        String CustomerID = "";
        String EmployeeID = "";
        try {
            /* Bluenose defaults to trying to use IPv6, which isn't working well right now and blocks the ServerSocket call.  This next line tells Java to us IPv4 like the rest of the world. */

            System.setProperty("java.net.preferIPv4Stack", "true");

            serverSocket = new ServerSocket(20112,1); // no backlog
        } catch (IOException e) {
            System.out.println("Could not listen on port: " + 20112);
            System.exit(-1);
        }

        Socket clientSocket = null;// for opening the connection to server from client 
        Boolean acceptance = false;// condition for fetching data from client 

        try {
            clientSocket = serverSocket.accept();
            acceptance = true;
        } catch (IOException e) {
            System.out.println("Accept failed: " + 20112);
            System.exit(-1);
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));// for  holding data comes from client
        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);// to send  data to client from server

        while (acceptance) {// it keeps executing until any failure occures or completed messages from being executed.
             
                String message;
               
                message = in.readLine();
                String[] forOperation = message.split(" ");

                String operation = forOperation[0];
                System.out.println(operation);
                if (operation.equals("AUTH")) {// handles signing in onto server  
                    String password;
                    password = in.readLine();
                    String[] forPassword = password.split(" ");
                    User u = new User();
                    String LastName = forOperation[1];// holds Lastname as username
                    password = forPassword[1];// holds birthdate as passwrod
                    User us = new User();
                    int EmployeeId = us.Authenticate(LastName, password);
                    EmployeeID = Integer.toString(EmployeeId);
                    if(EmployeeId != -1){
                        String AuthToken = ""+new Random().hashCode();
                        out.println(forOperation[2] + " 200" + " " + "ok" + "\nSet-Cookie: " + AuthToken + "\r\n");
                        StoredCookie = AuthToken;
                    }else{
                        out.println(forOperation[2] + " 401" + " " + "notok" + "\n" + "Nothing" + "\r\n");
                        acceptance = false;
                    }
                    out.flush();
                   
                } else if (operation.equals("LOGOUT")) {//handles Signing out for user from server
                    if(forOperation[1].equals("LOGOUT")){
                        String forCookier = in.readLine();
                        String AuthValue = forCookier.split(" ")[1];
                        StoredCookie = "";
                        acceptance = false;
                    }
                } else if (operation.equals("LIST")) {//handles the cases of LIST message through passing the vales inputted from client to db
                    String listtype = forOperation[1];
                    System.out.println(listtype);
                    String cookie = in.readLine().split(" ")[1];
                    if(!cookie.equals(StoredCookie)){
                        out.print(forOperation[2]+" 402 Wrong State\r\n");
                        out.flush();
                    }else{
                        if(listtype.equals("customer")){//handles the case of listing for customer data
                            if(StoredCookie.equals(cookie)){// checks vlues of generated cookie with cookie comes from client
                                Customer C = new Customer();
                                C.GenerateCustomerList();
                                out.print(forOperation[2]+" "+"200"+" "+"ok"+"\r\n"+"Content-Length: "+C.GetContentSize()+"\r\n");
                                out.print("\r\n");
                                out.print(C.GetCustomerList());
                                out.flush();
                            }
                        }else if(listtype.equals("product")){//handles the case of listing product data 
                            if(StoredCookie.equals(cookie)){
                                Product P = new Product();
                                P.GenerateCustomerList();
                                out.print(forOperation[2]+" "+"200"+" "+"ok"+"\r\n"+"Content-Length: "+P.GetContentSize()+"\r\n");
                                out.print("\r\n");
                                out.print(P.GetProductList());
                                out.flush();    
                            }
                        }else if(listtype.equals("order")){//handles the case of listing order data(The products and its quantity which are done by ADD message)
                            try{
                                if(StoredCookie.equals(cookie) && MainOrderObj != null){
                                    String products=MainOrderObj.GetTotalOrders();
                                    out.print(forOperation[2]+" "+"200"+" "+"ok"+"\n"+"Content-Length: "+MainOrderObj.GetContentSize()+"\n");
                                    out.print("\n");
                                    out.print(products);
                                    out.flush();    
                                }
                            }catch(Exception ex){
                                
                            }
                        }
                    }
                    
                } else if (operation.equals("NEW")) {//handles manipulation of Customer's address data(NEW message)
                    CustomerID = forOperation[1];
                    String Cookie = in.readLine().split(" ")[1];
                    if(!Cookie.equals(StoredCookie)){
                        out.print(forOperation[2]+" 402 Wrong State\r\n");
                        out.print("\r\n");
                        out.flush();
                    }else{
                        if(Customer.GetCustomerExist(CustomerID)==0){
                            out.print(forOperation[2]+" "+"404"+" "+"Bad Client\r\n");
                            out.print("\r\n");
                            out.flush();
                        }else{
                            String Line = in.readLine();
                            String Address="",City="",Region="",PostalCode="",Country="";
                            if(!Line.trim().equals("")){
                                try{// all variables hold value of address, street etx for chainging the customer address 
                                    Address = Line.substring(Line.indexOf(" "),Line.length());
                                    Line = in.readLine();
                                    Region = Line.substring(Line.indexOf(" "),Line.length());;
                                    Line = in.readLine();
                                    PostalCode = Line.substring(Line.indexOf(" "),Line.length());
                                    Line = in.readLine();
                                    Country = Line.substring(Line.indexOf(" "),Line.length());
                                    Line = in.readLine();
                                    City = Line.substring(Line.indexOf(" "),Line.length());;
                                    MainOrderObj = new Order(Address, Region, Country, City, PostalCode);
                                    MainOrderObj.UpdateAddress(CustomerID);
                                    out.print(forOperation[2]+" "+"200"+" "+"ok"+"\r\n");
                                    out.print("\r\n");
                                    out.flush();
                                }catch(Exception ex){
                                    out.print(forOperation[2]+" "+"405"+" "+"Incompelete Address"+"\r\n");
                                    out.print("\r\n");
                                    out.flush();
                                }
                            }else{
                                Customer C = new Customer();
                                C.GetCustomer(CustomerID);
                                if(C.Address.equals("")){
                                    out.print(forOperation[2]+" "+"402"+" "+"Wrong State"+"\r\n");
                                    out.print("\r\n");
                                    out.flush();
                                }else{
                                    MainOrderObj = new Order(C.Address, C.Region, C.Country, C.City, C.PostalCode);
                                    out.print(forOperation[2]+" "+"200"+" "+"ok"+"\r\n");
                                    out.print("\r\n");
                                    out.flush();
                                }
                            }
                        }
                    }
                } else if (operation.equals("ADD")) {//handles the ADD message opeartion
                    String ProductId = forOperation[1];
                    String CookieValue = in.readLine().split(" ")[1];
                    String ContentSize = in.readLine().split(":")[1];
                    in.readLine();
                    String Quantity = in.readLine();
                    if(CookieValue.equals(StoredCookie)){
                        int statusCode = Product.CheckProductExist(ProductId);
                        if(statusCode == 1){
                            out.print(forOperation[2]+" "+"406"+" "+"Bad Product\r\n");
                            out.print("\r\n");
                            out.flush();
                        }else if(statusCode == -1){
                            out.print(forOperation[2]+" "+"407"+" "+"Discontinued Item\r\n");
                            out.print("\r\n");
                            out.flush();
                        }else{
                            int QuantityInt = Integer.parseInt(Quantity);
                            if(QuantityInt == 0){
                                out.print(forOperation[2]+" "+"408"+" "+"Bad Order\r\n");
                                out.print("\r\n");
                                out.flush();
                            }else{
                                MainOrderObj.AddOrder(ProductId, Quantity);
                                out.print(forOperation[2]+" "+"200"+" "+"ok\r\n");
                                out.print("\r\n");
                                out.flush();
                            }
                        }
                    }
                } else if (operation.equals("ORDER")) {//handles the placing of order into database through Order class
                    String Cookie = in.readLine().split(" ")[1];
                    if(Cookie.equals(StoredCookie)){
                        int OrderId = MainOrderObj.PlaceOrder(CustomerID,EmployeeID,"");
                        if(OrderId > -1){
                            String OrderIdStr = Integer.toString(OrderId);
                            String ContentLength = Integer.toString(OrderIdStr.getBytes().length);
                            out.print(forOperation[2]+" "+"200"+" "+"ok"+"\n");
                            out.print("Content-Length: "+ContentLength+"\n");
                            out.print("\n");
                            out.print(OrderIdStr+"\r\n");
                            out.flush();
                        }
                    }else{
                        out.print(forOperation[2]+" "+"402"+" "+"NoAuth"+"\n");
                        out.print("\r\n");
                        out.flush();
                    }
                   
                } else if (operation.equals("DROP")) {// Drop the items from container which are added through ADD message
                    String Cookie = in.readLine().split(" ")[1];
                    if(Cookie.equals(StoredCookie)){
                        MainOrderObj.DropOrder();
                        MainOrderObj = null;
                        CustomerID = "";
                        out.print(forOperation[2]+" "+"200"+" "+"ok"+"\r\n");
                        out.print("\r\n");
                        out.flush();
                    }
                }
                
        }
        //Closes all connection
        out.close();
        in.close();
        clientSocket.close();
        

        /* Java doesn't like unreachable code.  The line below should appear somewhere, but, since the infinite while loop never break, we'll comment it out to keep the compiler happy. */

 /*  serverSocket.close();  */
    }
}
